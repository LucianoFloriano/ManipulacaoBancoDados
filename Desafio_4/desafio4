---
title: "Desafio 4"
author: "Luciano Floriano"
date: "2025-09-04"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(readr)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(leaflet)
library(htmltools)
```


Leitura dos dados:

```{r}
dados_voos <- read_csv_chunked('/dados/flights.csv.zip', callback = DataFrameCallback$new(getStats), chunk_size = 1e6)
```


Crie uma função que:
a. Receba um valor de TAIL_NUMBER (por exemplo, N431WN);
b. Produza uma tabela (tidy) com todos os trajetos realizados pela aeronave (ordenadas por data e hora,
contendo todas as colunas do arquivo flights.csv.zip);
c. Produza um mapa que apresente todo o trajeto voado pela aeronave ao longo de todo o ano; o trajeto
deve ser apresentado de maneira linear no tempo (i.e., segue a sequência do tempo, como no exemplo
hipotético dado acima);
d. O mapa deve ser decorado com estatísticas do seu interesse (por exemplo, velocidade média do vôo
como espessura da linha que conecta os aeroportos envolvidos no trajeto);
```{r}
analisa_aeronave <- function(tail_number, arquivo) {
  
  # 1. Ler dados dos aeroportos (coordenadas)
  caminho_airports <- file.path(dirname(arquivo), "airports.csv.zip")
  dados_aeroportos <- read_csv(caminho_airports, 
                              col_types = cols(
                                IATA_CODE = col_character(),
                                LATITUDE = col_double(),
                                LONGITUDE = col_double(),
                                CITY = col_character()
                              ))
  
  # 2. Ler dados dos voos por partes (usando readr::read_csv_chunked)
  # Filtra apenas os voos da aeronave específica que não foram cancelados
  voos_filtrados <- read_csv_chunked(
    arquivo,
    callback = DataFrameCallback$new(function(x, pos) {
      x %>% filter(TAIL_NUMBER == tail_number, CANCELLED == 0)
    }),
    col_types = cols(
      YEAR = col_integer(),
      MONTH = col_integer(),
      DAY = col_integer(),
      SCHEDULED_DEPARTURE = col_integer(),
      TAIL_NUMBER = col_character(),
      ORIGIN_AIRPORT = col_character(),
      DESTINATION_AIRPORT = col_character(),
      DISTANCE = col_double(),
      AIR_TIME = col_double(),
      CANCELLED = col_integer()
    )
  )
  
  # Verificar se foram encontrados voos para a aeronave
  if (nrow(voos_filtrados) == 0) {
    stop(paste("Nenhum voo encontrado para a aeronave", tail_number))
  }
  
  # 3. Processar dados dos voos
  dados_voos <- voos_filtrados %>%
    mutate(
      # Criar data completa
      data_completa = make_date(YEAR, MONTH, DAY),
      # Criar datetime aproximado (assumindo que SCHEDULED_DEPARTURE está em formato HHMM)
      hora_partida = sprintf("%04d", SCHEDULED_DEPARTURE),
      datetime_partida = ymd_hm(paste(data_completa, 
                                     substr(hora_partida, 1, 2), 
                                     substr(hora_partida, 3, 4)))
    ) %>%
    arrange(datetime_partida) %>%  # Ordenar por data e hora
    # Calcular velocidade média em mph
    mutate(velocidade_media = DISTANCE / (AIR_TIME / 60)) %>%
    # Remover voos com dados missing
    filter(!is.na(ORIGIN_AIRPORT), !is.na(DESTINATION_AIRPORT),
           !is.na(DISTANCE), !is.na(AIR_TIME))
  
  # 4. Juntar com coordenadas dos aeroportos
  dados_trajeto <- dados_voos %>%
    # Juntar coordenadas do aeroporto de origem
    left_join(dados_aeroportos %>% 
               select(IATA_CODE, LATITUDE, LONGITUDE, CITY),
             by = c("ORIGIN_AIRPORT" = "IATA_CODE")) %>%
    rename(lat_origem = LATITUDE, lon_origem = LONGITUDE, cidade_origem = CITY) %>%
    # Juntar coordenadas do aeroporto de destino
    left_join(dados_aeroportos %>% 
               select(IATA_CODE, LATITUDE, LONGITUDE, CITY),
             by = c("DESTINATION_AIRPORT" = "IATA_CODE")) %>%
    rename(lat_destino = LATITUDE, lon_destino = LONGITUDE, cidade_destino = CITY)
  
  # 5. Criar tabela tidy para retorno
  tabela_resultado <- dados_trajeto %>%
    select(
      data_completa, datetime_partida,
      ORIGIN_AIRPORT, cidade_origem, lat_origem, lon_origem,
      DESTINATION_AIRPORT, cidade_destino, lat_destino, lon_destino,
      DISTANCE, AIR_TIME, velocidade_media
    )
  
  # 6. Criar mapa com leaflet
  # Primeiro criar sequência de coordenadas para a rota completa
coordenadas_rota <- data.frame(
  lat = c(dados_trajeto$lat_origem, dados_trajeto$lat_destino),
  lon = c(dados_trajeto$lon_origem, dados_trajeto$lon_destino)
)
coordenadas_rota <- coordenadas_rota[order(dados_trajeto$datetime_partida), ]
  
  
  # Criar mapa
  mapa_trajeto <- leaflet() %>%
    addTiles() %>%
    # Adicionar linha do trajeto completo
    addPolylines(
      data = coordenadas_rota,
      lng = ~lon,
      lat = ~lat,
      weight = 3,
      color = "blue",
      opacity = 0.8,
      popup = paste("Trajeto completo da aeronave", tail_number)
    ) %>%
    # Adicionar marcadores para cada aeroporto de origem
    addCircleMarkers(
      data = dados_trajeto,
      lng = ~lon_origem,
      lat = ~lat_origem,
      radius = 6,
      color = "red",
      fillColor = "red",
      fillOpacity = 0.8,
      popup = ~paste0(
        "Origem: ", ORIGIN_AIRPORT, " - ", cidade_origem, "<br>",
        "Data: ", data_completa, "<br>",
        "Hora: ", format(datetime_partida, "%H:%M"), "<br>",
        "Distância: ", round(DISTANCE, 1), " milhas<br>",
        "Velocidade: ", round(velocidade_media, 1), " mph"
      )
    ) %>%
    # Adicionar marcadores para cada aeroporto de destino
    addCircleMarkers(
      data = dados_trajeto,
      lng = ~lon_destino,
      lat = ~lat_destino,
      radius = 6,
      color = "green",
      fillColor = "green",
      fillOpacity = 0.8,
      popup = ~paste0(
        "Destino: ", DESTINATION_AIRPORT, " - ", cidade_destino, "<br>",
        "Data: ", data_completa, "<br>",
        "Hora: ", format(datetime_partida, "%H:%M"), "<br>",
        "Distância: ", round(DISTANCE, 1), " milhas<br>",
        "Velocidade: ", round(velocidade_media, 1), " mph"
      )
    ) %>%
    # Adicionar título
    addControl(
      paste("Trajeto da Aeronave", tail_number),
      position = "topright"
    )
  
  # 7. Retornar lista nomeada
  resultado <- list(
    tabela_trajetos = tabela_resultado,
    mapa_trajeto = mapa_trajeto
  )
  
  return(resultado)
}
```

